/* The following code was generated by JFlex 1.7.0 */

package grammar;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>../grammar.lex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\11\2\2\1\1\22\0\1\2\1\101\1\10\3\0"+
    "\1\102\1\67\1\75\1\76\1\74\1\72\1\71\1\73\1\0\1\77"+
    "\1\3\11\4\1\66\1\104\1\0\1\70\1\0\1\105\1\0\1\43"+
    "\1\65\1\51\1\47\1\42\1\35\1\53\1\56\1\55\1\7\1\64"+
    "\1\41\1\40\1\50\1\36\1\44\1\61\1\37\1\45\1\46\1\62"+
    "\1\54\2\7\1\52\1\7\4\0\1\5\1\0\1\21\1\23\1\27"+
    "\1\25\1\14\1\31\1\24\1\30\1\13\1\7\1\63\1\15\1\32"+
    "\1\16\1\17\1\12\1\57\1\20\1\26\1\22\1\60\1\33\1\7"+
    "\1\6\1\34\1\7\1\0\1\100\1\0\1\103\6\0\1\2\32\0"+
    "\1\2\u15df\0\1\2\u097f\0\13\2\35\0\2\2\5\0\1\2\57\0"+
    "\1\2\u0fa0\0\1\2\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\26\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\0\1\6\1\0\3\6\1\27\41\6\1\0"+
    "\1\6\1\30\2\6\1\31\2\6\1\32\6\6\1\33"+
    "\1\6\1\34\1\35\26\6\1\35\1\6\1\0\4\6"+
    "\1\36\1\37\14\6\1\40\1\41\2\6\1\42\1\43"+
    "\1\44\11\6\2\0\5\6\1\45\1\6\1\46\2\6"+
    "\1\47\2\6\1\50\1\51\2\6\1\52\1\53\4\6"+
    "\1\0\3\6\1\0\3\6\1\54\2\6\1\55\1\6"+
    "\1\56\1\57\5\6\1\0\2\6\2\0\2\6\1\60"+
    "\6\6\1\61\2\6\1\62\2\6\1\63\2\6\1\0"+
    "\1\6\1\64\1\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\106\0\322\0\u0118\0\u015e\0\u01a4"+
    "\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4"+
    "\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604"+
    "\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\106\0\106"+
    "\0\106\0\106\0\106\0\106\0\106\0\106\0\106\0\106"+
    "\0\214\0\106\0\106\0\106\0\106\0\106\0\u07ee\0\322"+
    "\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u015e\0\u0992\0\u09d8"+
    "\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08"+
    "\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38"+
    "\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068"+
    "\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298"+
    "\0\u12de\0\u087a\0\u1324\0\u136a\0\u015e\0\u13b0\0\u13f6\0\u015e"+
    "\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u015e\0\u15e0"+
    "\0\u015e\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca"+
    "\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa"+
    "\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a"+
    "\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u015e"+
    "\0\u015e\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe"+
    "\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u015e\0\u015e\0\u21a2"+
    "\0\u21e8\0\u015e\0\u015e\0\u015e\0\u222e\0\u2274\0\u22ba\0\u2300"+
    "\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530"+
    "\0\u2576\0\u25bc\0\u2602\0\u2648\0\u015e\0\u268e\0\u015e\0\u26d4"+
    "\0\u271a\0\u015e\0\u2760\0\u27a6\0\u015e\0\u015e\0\u27ec\0\u2832"+
    "\0\u015e\0\u015e\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6"+
    "\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u015e\0\u2bc0"+
    "\0\u2c06\0\u015e\0\u2c4c\0\u015e\0\u015e\0\u2c92\0\u2cd8\0\u2d1e"+
    "\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e"+
    "\0\u2f94\0\u015e\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138"+
    "\0\u015e\0\u317e\0\u31c4\0\u015e\0\u320a\0\u3250\0\u015e\0\u3296"+
    "\0\u32dc\0\u3322\0\u3368\0\u015e\0\u33ae";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\3\7\1\10\1\3"+
    "\1\11\1\12\1\13\1\14\1\7\1\15\1\16\1\17"+
    "\1\7\1\20\1\21\1\22\1\23\1\24\1\7\1\25"+
    "\1\26\2\7\1\27\1\7\1\30\1\7\1\31\1\7"+
    "\1\32\1\33\1\34\1\7\1\35\3\7\1\36\12\7"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\107\0\1\3\7\0\1\3\66\0\1\3\13\0\1\57"+
    "\102\0\2\6\104\0\1\60\1\61\3\7\2\0\54\7"+
    "\20\0\11\62\1\0\74\62\3\0\1\60\1\61\3\7"+
    "\2\0\1\7\1\63\3\7\1\64\46\7\23\0\1\60"+
    "\1\61\3\7\2\0\4\7\1\65\12\7\1\66\34\7"+
    "\23\0\1\60\1\61\3\7\2\0\3\7\1\67\1\70"+
    "\47\7\23\0\1\60\1\61\3\7\2\0\2\7\1\71"+
    "\51\7\23\0\1\60\1\61\3\7\2\0\1\72\53\7"+
    "\23\0\1\60\1\61\3\7\2\0\1\7\1\73\1\74"+
    "\4\7\1\75\44\7\23\0\1\60\1\61\3\7\2\0"+
    "\3\7\1\76\50\7\23\0\1\60\1\61\3\7\2\0"+
    "\2\7\1\77\51\7\23\0\1\60\1\61\3\7\2\0"+
    "\5\7\1\100\46\7\23\0\1\60\1\61\3\7\2\0"+
    "\2\7\1\101\51\7\23\0\1\60\1\61\3\7\2\0"+
    "\1\102\1\7\1\103\4\7\1\104\44\7\23\0\1\60"+
    "\1\61\3\7\2\0\5\7\1\105\46\7\23\0\1\60"+
    "\1\61\3\7\2\0\1\7\1\106\1\107\2\7\1\110"+
    "\1\111\45\7\23\0\1\60\1\61\3\7\2\0\5\7"+
    "\1\112\46\7\23\0\1\60\1\61\3\7\2\0\24\7"+
    "\1\113\3\7\1\114\12\7\1\115\10\7\23\0\1\60"+
    "\1\61\3\7\2\0\31\7\1\116\11\7\1\117\10\7"+
    "\23\0\1\60\1\61\3\7\2\0\30\7\1\120\23\7"+
    "\23\0\1\60\1\61\3\7\2\0\27\7\1\121\24\7"+
    "\23\0\1\60\1\61\3\7\2\0\24\7\1\122\16\7"+
    "\1\123\10\7\23\0\1\60\1\61\3\7\2\0\30\7"+
    "\1\124\1\125\22\7\23\0\1\60\1\61\3\7\2\0"+
    "\30\7\1\126\23\7\23\0\1\60\1\61\3\7\2\0"+
    "\24\7\1\127\27\7\23\0\2\130\1\0\2\130\2\0"+
    "\54\130\23\0\1\131\1\61\3\7\2\0\54\7\20\0"+
    "\10\62\1\132\1\0\74\62\3\0\1\60\1\61\3\7"+
    "\2\0\1\133\14\7\1\134\36\7\23\0\1\60\1\61"+
    "\3\7\2\0\14\7\1\135\37\7\23\0\1\60\1\61"+
    "\3\7\2\0\14\7\1\136\37\7\23\0\1\60\1\61"+
    "\3\7\2\0\14\7\1\137\37\7\23\0\1\60\1\61"+
    "\3\7\2\0\13\7\1\140\40\7\23\0\1\60\1\61"+
    "\3\7\2\0\17\7\1\141\1\142\33\7\23\0\1\60"+
    "\1\61\3\7\2\0\2\7\1\143\51\7\23\0\1\60"+
    "\1\61\3\7\2\0\12\7\1\144\41\7\23\0\1\60"+
    "\1\61\3\7\2\0\1\145\53\7\23\0\1\60\1\61"+
    "\3\7\2\0\4\7\1\146\47\7\23\0\1\60\1\61"+
    "\3\7\2\0\3\7\1\147\50\7\23\0\1\60\1\61"+
    "\3\7\2\0\12\7\1\150\41\7\23\0\1\60\1\61"+
    "\3\7\2\0\21\7\1\151\32\7\23\0\1\60\1\61"+
    "\3\7\2\0\1\152\2\7\1\153\5\7\1\154\42\7"+
    "\23\0\1\60\1\61\3\7\2\0\3\7\1\155\50\7"+
    "\23\0\1\60\1\61\3\7\2\0\7\7\1\156\35\7"+
    "\1\157\6\7\23\0\1\60\1\61\3\7\2\0\21\7"+
    "\1\160\32\7\23\0\1\60\1\61\3\7\2\0\1\161"+
    "\53\7\23\0\1\60\1\61\3\7\2\0\6\7\1\162"+
    "\45\7\23\0\1\60\1\61\3\7\2\0\7\7\1\163"+
    "\44\7\23\0\1\60\1\61\3\7\2\0\6\7\1\164"+
    "\45\7\23\0\1\60\1\61\3\7\2\0\5\7\1\165"+
    "\46\7\23\0\1\60\1\61\3\7\2\0\21\7\1\166"+
    "\32\7\23\0\1\60\1\61\3\7\2\0\25\7\1\167"+
    "\26\7\23\0\1\60\1\61\3\7\2\0\31\7\1\170"+
    "\22\7\23\0\1\60\1\61\3\7\2\0\25\7\1\171"+
    "\26\7\23\0\1\60\1\61\3\7\2\0\36\7\1\172"+
    "\15\7\23\0\1\60\1\61\3\7\2\0\41\7\1\173"+
    "\12\7\23\0\1\60\1\61\3\7\2\0\23\7\1\174"+
    "\2\7\1\175\25\7\23\0\1\60\1\61\3\7\2\0"+
    "\27\7\1\147\24\7\23\0\1\60\1\61\3\7\2\0"+
    "\33\7\1\135\20\7\23\0\1\60\1\61\3\7\2\0"+
    "\37\7\1\176\14\7\23\0\1\60\1\61\3\7\2\0"+
    "\47\7\1\177\4\7\23\0\1\60\1\61\3\7\2\0"+
    "\42\7\1\200\11\7\23\0\1\60\1\61\3\7\2\0"+
    "\32\7\1\201\20\7\1\202\23\0\1\60\1\61\3\7"+
    "\2\0\42\7\1\151\11\7\23\0\2\203\1\0\2\203"+
    "\2\0\54\203\23\0\1\131\1\61\1\7\1\204\1\7"+
    "\2\0\54\7\23\0\1\60\1\61\3\7\2\0\2\7"+
    "\1\205\51\7\23\0\1\60\1\61\3\7\2\0\51\7"+
    "\1\206\2\7\23\0\1\60\1\61\3\7\2\0\2\7"+
    "\1\207\51\7\23\0\1\60\1\61\3\7\2\0\2\7"+
    "\1\210\51\7\23\0\1\60\1\61\3\7\2\0\10\7"+
    "\1\211\43\7\23\0\1\60\1\61\3\7\2\0\20\7"+
    "\1\212\33\7\23\0\1\60\1\61\3\7\2\0\6\7"+
    "\1\213\45\7\23\0\1\60\1\61\3\7\2\0\16\7"+
    "\1\214\35\7\23\0\1\60\1\61\3\7\2\0\3\7"+
    "\1\215\50\7\23\0\1\60\1\61\3\7\2\0\13\7"+
    "\1\216\40\7\23\0\1\60\1\61\3\7\2\0\1\7"+
    "\1\217\52\7\23\0\1\60\1\61\3\7\2\0\2\7"+
    "\1\220\51\7\23\0\1\60\1\61\3\7\2\0\2\7"+
    "\1\221\51\7\23\0\1\60\1\61\3\7\2\0\46\7"+
    "\1\222\5\7\23\0\1\60\1\61\3\7\2\0\1\7"+
    "\1\223\52\7\23\0\1\60\1\61\3\7\2\0\6\7"+
    "\1\224\45\7\23\0\1\60\1\61\3\7\2\0\46\7"+
    "\1\225\5\7\23\0\1\60\1\61\3\7\2\0\2\7"+
    "\1\226\51\7\23\0\1\60\1\61\3\7\2\0\22\7"+
    "\1\227\31\7\23\0\1\60\1\61\3\7\2\0\14\7"+
    "\1\230\37\7\23\0\1\60\1\61\3\7\2\0\10\7"+
    "\1\231\43\7\23\0\1\60\1\61\3\7\2\0\20\7"+
    "\1\232\33\7\23\0\1\60\1\61\3\7\2\0\20\7"+
    "\1\233\33\7\23\0\1\60\1\61\3\7\2\0\2\7"+
    "\1\234\51\7\23\0\1\60\1\61\3\7\2\0\26\7"+
    "\1\232\25\7\23\0\1\60\1\61\3\7\2\0\34\7"+
    "\1\235\17\7\23\0\1\60\1\61\3\7\2\0\33\7"+
    "\1\236\20\7\23\0\1\60\1\61\3\7\2\0\35\7"+
    "\1\237\16\7\23\0\1\60\1\61\3\7\2\0\44\7"+
    "\1\240\7\7\23\0\1\60\1\61\3\7\2\0\34\7"+
    "\1\211\17\7\23\0\1\60\1\61\3\7\2\0\26\7"+
    "\1\241\25\7\23\0\1\60\1\61\3\7\2\0\52\7"+
    "\1\242\1\7\23\0\1\60\1\61\3\7\2\0\50\7"+
    "\1\243\3\7\23\0\1\60\1\61\3\7\2\0\30\7"+
    "\1\226\23\7\23\0\1\60\1\61\3\7\2\0\30\7"+
    "\1\244\23\7\23\0\1\60\1\61\3\7\2\0\50\7"+
    "\1\245\3\7\23\0\2\246\1\0\2\246\2\0\54\246"+
    "\23\0\1\247\1\250\1\7\2\251\2\0\54\251\23\0"+
    "\1\60\1\61\3\7\2\0\3\7\1\252\50\7\23\0"+
    "\1\60\1\61\1\253\2\7\2\0\54\7\23\0\1\60"+
    "\1\61\3\7\2\0\6\7\1\254\45\7\23\0\1\60"+
    "\1\61\3\7\2\0\7\7\1\255\44\7\23\0\1\60"+
    "\1\61\3\7\2\0\7\7\1\256\44\7\23\0\1\60"+
    "\1\61\3\7\2\0\10\7\1\257\43\7\23\0\1\60"+
    "\1\61\3\7\2\0\7\7\1\260\44\7\23\0\1\60"+
    "\1\61\3\7\2\0\5\7\1\261\46\7\23\0\1\60"+
    "\1\61\3\7\2\0\4\7\1\262\47\7\23\0\1\60"+
    "\1\61\3\7\2\0\4\7\1\263\47\7\23\0\1\60"+
    "\1\61\3\7\2\0\10\7\1\264\43\7\23\0\1\60"+
    "\1\61\3\7\2\0\12\7\1\265\41\7\23\0\1\60"+
    "\1\61\3\7\2\0\10\7\1\266\43\7\23\0\1\60"+
    "\1\61\3\7\2\0\15\7\1\267\36\7\23\0\1\60"+
    "\1\61\3\7\2\0\2\7\1\270\51\7\23\0\1\60"+
    "\1\61\3\7\2\0\10\7\1\271\43\7\23\0\1\60"+
    "\1\61\3\7\2\0\14\7\1\272\37\7\23\0\1\60"+
    "\1\61\3\7\2\0\33\7\1\272\20\7\23\0\1\60"+
    "\1\61\3\7\2\0\34\7\1\271\17\7\23\0\1\60"+
    "\1\61\3\7\2\0\24\7\1\273\27\7\23\0\1\60"+
    "\1\61\3\7\2\0\34\7\1\257\17\7\23\0\1\60"+
    "\1\61\3\7\2\0\31\7\1\255\22\7\23\0\1\60"+
    "\1\61\1\274\2\7\2\0\54\7\23\0\1\60\1\61"+
    "\3\7\2\0\30\7\1\275\23\7\23\0\1\60\1\61"+
    "\3\7\2\0\36\7\1\276\15\7\23\0\1\60\1\61"+
    "\3\7\2\0\41\7\1\265\12\7\23\0\2\7\1\0"+
    "\2\7\2\0\54\7\23\0\2\203\1\0\1\277\1\203"+
    "\2\0\54\203\23\0\1\300\1\301\1\7\2\302\2\0"+
    "\54\302\23\0\1\303\1\301\1\7\2\302\2\0\54\302"+
    "\23\0\1\60\1\61\3\7\2\0\1\7\1\304\52\7"+
    "\23\0\1\60\1\61\3\7\2\0\6\7\1\305\10\7"+
    "\1\306\34\7\23\0\1\60\1\61\3\7\2\0\10\7"+
    "\1\307\43\7\23\0\1\60\1\61\3\7\2\0\10\7"+
    "\1\310\43\7\23\0\1\60\1\61\3\7\2\0\15\7"+
    "\1\311\36\7\23\0\1\60\1\61\3\7\2\0\20\7"+
    "\1\312\33\7\23\0\1\60\1\61\3\7\2\0\13\7"+
    "\1\313\40\7\23\0\1\60\1\61\3\7\2\0\2\7"+
    "\1\314\51\7\23\0\1\60\1\61\3\7\2\0\16\7"+
    "\1\315\35\7\23\0\1\60\1\61\3\7\2\0\4\7"+
    "\1\316\47\7\23\0\1\60\1\61\3\7\2\0\26\7"+
    "\1\312\25\7\23\0\1\60\1\61\3\7\2\0\23\7"+
    "\1\317\1\7\1\320\26\7\23\0\1\60\1\61\3\7"+
    "\2\0\36\7\1\321\15\7\23\0\1\60\1\61\3\7"+
    "\2\0\35\7\1\322\16\7\23\0\2\323\1\0\2\323"+
    "\2\0\54\323\23\0\1\131\1\61\1\7\1\324\1\325"+
    "\2\0\54\325\23\0\1\131\1\61\1\7\2\325\2\0"+
    "\54\325\23\0\1\326\1\61\1\7\2\325\2\0\54\325"+
    "\23\0\2\246\1\0\1\327\1\246\2\0\54\246\23\0"+
    "\1\60\1\61\3\7\2\0\4\7\1\330\47\7\23\0"+
    "\1\60\1\61\3\7\2\0\7\7\1\75\44\7\23\0"+
    "\1\60\1\61\3\7\2\0\1\7\1\106\52\7\23\0"+
    "\1\60\1\61\3\7\2\0\1\7\1\331\52\7\23\0"+
    "\1\60\1\61\3\7\2\0\2\7\1\332\51\7\23\0"+
    "\1\60\1\61\3\7\2\0\2\7\1\333\51\7\23\0"+
    "\1\60\1\61\3\7\2\0\15\7\1\334\36\7\23\0"+
    "\1\60\1\61\3\7\2\0\43\7\1\115\10\7\23\0"+
    "\1\60\1\61\3\7\2\0\31\7\1\116\22\7\23\0"+
    "\1\60\1\61\3\7\2\0\37\7\1\335\14\7\23\0"+
    "\1\60\1\61\3\7\2\0\30\7\1\336\23\7\23\0"+
    "\2\302\1\0\2\302\2\0\54\302\23\0\1\337\1\250"+
    "\1\7\2\251\2\0\54\251\23\0\1\340\1\61\3\7"+
    "\2\0\54\7\23\0\2\7\1\0\1\204\1\7\2\0"+
    "\54\7\23\0\2\251\1\0\2\251\2\0\54\251\23\0"+
    "\1\60\1\61\3\7\2\0\2\7\1\341\51\7\23\0"+
    "\1\60\1\61\3\7\2\0\5\7\1\342\46\7\23\0"+
    "\1\60\1\61\3\7\2\0\4\7\1\343\47\7\23\0"+
    "\1\60\1\61\3\7\2\0\2\7\1\344\51\7\23\0"+
    "\1\60\1\61\3\7\2\0\30\7\1\344\23\7\23\0"+
    "\1\60\1\61\3\7\2\0\36\7\1\345\15\7\23\0"+
    "\1\303\1\301\1\7\1\346\1\302\2\0\54\302\23\0"+
    "\1\60\1\61\1\7\1\204\1\7\2\0\54\7\23\0"+
    "\1\60\1\61\3\7\2\0\4\7\1\347\47\7\23\0"+
    "\1\60\1\61\3\7\2\0\15\7\1\350\36\7\23\0"+
    "\1\60\1\61\3\7\2\0\37\7\1\351\14\7\23\0"+
    "\1\352\1\250\1\7\2\353\2\0\54\353\23\0\1\60"+
    "\1\61\3\7\2\0\22\7\1\354\31\7\23\0\1\60"+
    "\1\61\3\7\2\0\40\7\1\354\13\7\23\0\2\302"+
    "\1\0\1\346\1\302\2\0\54\302\23\0\1\355\1\301"+
    "\1\7\2\302\2\0\54\302\23\0\1\326\1\61\1\7"+
    "\1\324\1\325\2\0\54\325\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\32\1\12\11\1\1\5\11"+
    "\2\0\1\1\1\0\45\1\1\0\52\1\1\0\42\1"+
    "\2\0\27\1\1\0\3\1\1\0\17\1\1\0\2\1"+
    "\2\0\22\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
    public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 240) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol( Sym.EOF );
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <" + yytext() + "> at line " + yyline + ":" + yycolumn);
            } 
            // fall through
          case 53: break;
          case 2: 
            { return symbol(Sym.LINEBREAK);
            } 
            // fall through
          case 54: break;
          case 3: 
            { 
            } 
            // fall through
          case 55: break;
          case 4: 
            { return symbol(Sym.ZERO);
            } 
            // fall through
          case 56: break;
          case 5: 
            { return symbol(Sym.NUMBER, new Integer(Integer.parseInt(yytext())));
            } 
            // fall through
          case 57: break;
          case 6: 
            { return symbol(Sym.STRING, new String(yytext()));
            } 
            // fall through
          case 58: break;
          case 7: 
            { return symbol(Sym.COLON);
            } 
            // fall through
          case 59: break;
          case 8: 
            { return symbol(Sym.QUOTATION);
            } 
            // fall through
          case 60: break;
          case 9: 
            { return symbol(Sym.EQUALS);
            } 
            // fall through
          case 61: break;
          case 10: 
            { return symbol(Sym.COMMA);
            } 
            // fall through
          case 62: break;
          case 11: 
            { return symbol(Sym.PLUS);
            } 
            // fall through
          case 63: break;
          case 12: 
            { return symbol(Sym.MINUS);
            } 
            // fall through
          case 64: break;
          case 13: 
            { return symbol(Sym.STAR);
            } 
            // fall through
          case 65: break;
          case 14: 
            { return symbol(Sym.BRACKETS_LEFT);
            } 
            // fall through
          case 66: break;
          case 15: 
            { return symbol(Sym.BRACKETS_RIGHT);
            } 
            // fall through
          case 67: break;
          case 16: 
            { return symbol(Sym.SLASH);
            } 
            // fall through
          case 68: break;
          case 17: 
            { return symbol(Sym.PIPE);
            } 
            // fall through
          case 69: break;
          case 18: 
            { return symbol(Sym.EXCLAMATION);
            } 
            // fall through
          case 70: break;
          case 19: 
            { return symbol(Sym.AMPERSAND);
            } 
            // fall through
          case 71: break;
          case 20: 
            { return symbol(Sym.TILDE);
            } 
            // fall through
          case 72: break;
          case 21: 
            { return symbol(Sym.SEMICOLON);
            } 
            // fall through
          case 73: break;
          case 22: 
            { return symbol(Sym.QUESTION);
            } 
            // fall through
          case 74: break;
          case 23: 
            { return symbol(Sym.IF);
            } 
            // fall through
          case 75: break;
          case 24: 
            { return symbol(Sym.SEMGREX, new String(yytext()));
            } 
            // fall through
          case 76: break;
          case 25: 
            { return symbol(Sym.POS);
            } 
            // fall through
          case 77: break;
          case 26: 
            { return symbol(Sym.END);
            } 
            // fall through
          case 78: break;
          case 27: 
            { return symbol(Sym.ALL);
            } 
            // fall through
          case 79: break;
          case 28: 
            { return symbol(Sym.GOV);
            } 
            // fall through
          case 80: break;
          case 29: 
            { return symbol(Sym.DEP);
            } 
            // fall through
          case 81: break;
          case 30: 
            { return symbol(Sym.ELSE);
            } 
            // fall through
          case 82: break;
          case 31: 
            { return symbol(Sym.LEFT);
            } 
            // fall through
          case 83: break;
          case 32: 
            { System.out.println("//SAVE"); return symbol(Sym.SAVE);
            } 
            // fall through
          case 84: break;
          case 33: 
            { return symbol(Sym.COPY);
            } 
            // fall through
          case 85: break;
          case 34: 
            { return symbol(Sym.FORM);
            } 
            // fall through
          case 86: break;
          case 35: 
            { return symbol(Sym.FROM);
            } 
            // fall through
          case 87: break;
          case 36: 
            { return symbol(Sym.MOVE);
            } 
            // fall through
          case 88: break;
          case 37: 
            { return symbol(Sym.LEMMA);
            } 
            // fall through
          case 89: break;
          case 38: 
            { return symbol(Sym.RIGHT);
            } 
            // fall through
          case 90: break;
          case 39: 
            { return symbol(Sym.BEGIN);
            } 
            // fall through
          case 91: break;
          case 40: 
            { return symbol(Sym.DEBUG);
            } 
            // fall through
          case 92: break;
          case 41: 
            { return symbol(Sym.SPLIT);
            } 
            // fall through
          case 93: break;
          case 42: 
            { return symbol(Sym.FIRST);
            } 
            // fall through
          case 94: break;
          case 43: 
            { return symbol(Sym.FEATS);
            } 
            // fall through
          case 95: break;
          case 44: 
            { return symbol(Sym.INSERT);
            } 
            // fall through
          case 96: break;
          case 45: 
            { return symbol(Sym.RANDOM);
            } 
            // fall through
          case 97: break;
          case 46: 
            { return symbol(Sym.DELETE);
            } 
            // fall through
          case 98: break;
          case 47: 
            { return symbol(Sym.SEARCH);
            } 
            // fall through
          case 99: break;
          case 48: 
            { return symbol(Sym.REPLACE);
            } 
            // fall through
          case 100: break;
          case 49: 
            { return symbol(Sym.PIPELINE);
            } 
            // fall through
          case 101: break;
          case 50: 
            { return symbol(Sym.SEQUENCE);
            } 
            // fall through
          case 102: break;
          case 51: 
            { return symbol(Sym.OPERATION);
            } 
            // fall through
          case 103: break;
          case 52: 
            { return symbol(Sym.DEPENDENCY);
            } 
            // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
